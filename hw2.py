# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1666GzQNXpVS8l3qoTjxs8gmpAV2wo778
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from sklearn.neural_network import MLPClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report,confusion_matrix

np.random.seed(334)

name = ['word_freq_make' ,'word_freq_address', 'word_freq_all', 'word_freq_3d', 'word_freq_our',
'word_freq_remove',
'word_freq_internet',
'word_freq_order',
'word_freq_mail',
'word_freq_receive',
'word_freq_will',
'word_freq_people',
'word_freq_report',
'word_freq_addresses',
'word_freq_free',
'word_freq_business',
'word_freq_email',
'word_freq_you',
'word_freq_credit',
'word_freq_your',
'word_freq_font',
'word_freq_000',
'word_freq_money',
'word_freq_hp',
'word_freq_hpl',
'word_freq_george',
'word_freq_650',
'word_freq_lab',
'word_freq_labs',
'word_freq_telnet',
'word_freq_857',
'word_freq_data',
'word_freq_415',
'word_freq_85',
'word_freq_technology',
'word_freq_1999',
'word_freq_parts',
'word_freq_pm',
'word_freq_direct',
'word_freq_cs',
'word_freq_meeting',
'word_freq_original',
'word_freq_project',
'word_freq_re',
'word_freq_edu',
'word_freq_table',
'word_freq_conference',
'char_freq_;',
'char_freq_(',
'char_freq_[',
'char_freq_!',
'char_freq_$',
'char_freq_#',
'capital_run_length_average',
'capital_run_length_longest',
'capital_run_length_total',
'target']
raw_input = pd.read_csv("https://raw.githubusercontent.com/shrutib55/hw2/main/spambase.data", names = name)
raw_input.tail()

raw_input['target'] = raw_input.target.astype('category')

processed_data = raw_input

scaler = StandardScaler()
nums = raw_input.iloc[:, 0:(len(processed_data) - 1)]
df_scaled = pd.DataFrame(scaler.fit_transform(nums),columns = nums.columns)
df_scaled.reset_index(inplace=True, drop=True)
raw_input.reset_index(inplace=True, drop=True)

df3 = pd.concat([df_scaled, raw_input.target], axis=1)
df3.head()

processed_data = raw_input

raw_input['target']

ncols = len(processed_data.columns)
nrows = len(processed_data.index)
X = processed_data.iloc[:, 0:(ncols - 1)]
y = processed_data.iloc[:, (ncols-1)]
X_train, X_test, y_train, y_test = train_test_split(
            X, y,  test_size=0.2)

mlp = MLPClassifier(activation="tanh", solver="sgd", learning_rate_init = 0.001, max_iter=10000, hidden_layer_sizes= (15,2))

model1 = mlp.fit(X_train,y_train)
predict_train = model1.predict(X_train)
predict_test = model1.predict(X_test)

accuracy_score(y_train, predict_train)
accuracy_score(y_test, predict_test)

print("Training: ")
print(classification_report(y_train, predict_train))

print("Testing: ")
print(classification_report(y_test, predict_test))

mlp = MLPClassifier(activation="logistic", solver="sgd", learning_rate_init = 0.01, max_iter=1000, hidden_layer_sizes= (20,2))

model2 = mlp.fit(X_train,y_train)
predict_train = model2.predict(X_train)
predict_test = model2.predict(X_test)

accuracy_score(y_train, predict_train)
accuracy_score(y_test, predict_test)

print("Training: ")
print(classification_report(y_train, predict_train))

print("Testing: ")
print(classification_report(y_test, predict_test))

mlp = MLPClassifier(activation="logistic", solver="sgd", learning_rate_init = 0.0001, max_iter=1000, hidden_layer_sizes= (15,2))

model3 = mlp.fit(X_train,y_train)
predict_train = model3.predict(X_train)
predict_test = model3.predict(X_test)

accuracy_score(y_train, predict_train)
accuracy_score(y_test, predict_test)

print("Training: ")
print(classification_report(y_train, predict_train))

print("Testing: ")
print(classification_report(y_test, predict_test))

mlp = MLPClassifier(activation="logistic", solver="sgd", learning_rate_init = 0.01, max_iter=1000, hidden_layer_sizes= (100,2))

model4 = mlp.fit(X_train,y_train)
predict_train = model4.predict(X_train)
predict_test = model4.predict(X_test)

accuracy_score(y_train, predict_train)
accuracy_score(y_test, predict_test)

print("Training: ")
print(classification_report(y_train, predict_train))

print("Testing: ")
print(classification_report(y_test, predict_test))

mlp = MLPClassifier(activation="tanh", solver="sgd", learning_rate_init = 0.01, max_iter=1000, hidden_layer_sizes= (100,2))

model5 = mlp.fit(X_train,y_train)
predict_train = model5.predict(X_train)
predict_test = model5.predict(X_test)

accuracy_score(y_train, predict_train)
accuracy_score(y_test, predict_test)

print("Training: ")
print(classification_report(y_train, predict_train))

print("Testing: ")
print(classification_report(y_test, predict_test))

mlp = MLPClassifier(activation="relu", solver="sgd", learning_rate_init = 0.01, max_iter=1000, hidden_layer_sizes= (100,2))

model6 = mlp.fit(X_train,y_train)
predict_train = model6.predict(X_train)
predict_test = model6.predict(X_test)

accuracy_score(y_train, predict_train)
accuracy_score(y_test, predict_test)

print("Training: ")
print(classification_report(y_train, predict_train))

print("Testing: ")
print(classification_report(y_test, predict_test))

mlp = MLPClassifier(activation="logistic", solver="sgd", learning_rate_init = 0.000000001, max_iter=1000, hidden_layer_sizes= (100,2))

model7 = mlp.fit(X_train,y_train)
predict_train = model7.predict(X_train)
predict_test = model7.predict(X_test)

accuracy_score(y_train, predict_train)
accuracy_score(y_test, predict_test)

print("Training: ")
print(classification_report(y_train, predict_train))

print("Testing: ")
print(classification_report(y_test, predict_test))

plt.plot(model1.loss_curve_, label='model1')
plt.plot(model2.loss_curve_, label='model2')
plt.plot(model3.loss_curve_, label='model3')
plt.plot(model4.loss_curve_, label='model4')
plt.plot(model5.loss_curve_, label='model5')
plt.plot(model6.loss_curve_, label='model6')
plt.plot(model7.loss_curve_, label='model7')
plt.legend()
plt.show()